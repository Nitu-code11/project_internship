# -*- coding: utf-8 -*-
"""final project 1- Netflix data analysis by nitu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1woJgNkF2iDDXyBYJf1FHvHX9ugthFWW8

# **PROJECT 1 - NETFLIX DATA: CLEANING, ANALYSIS AND VISUALIZATION**

## STEP 1 :- IMPORT REQUIRED LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

"""## STEP 2 :- LOAD  THE DATASET"""

data = pd.read_csv('/content/drive/MyDrive/netflix1.csv')
print(data.head())

data.head()

print(data.tail())

data.describe()

data.shape

data.size

data.columns

data['show_id'].value_counts()

data['show_id'].describe()

data['rating'].value_counts()

data['rating'].describe()

data['director'].value_counts()

data['director'].describe()

data['country'].value_counts()

data['country'].describe()

"""# STEP 3 :- DATA CLEANING"""

print(data.isnull().sum())      #Check for missing values

"""## **DROP DUPLICATES**"""

data.duplicated().sum()       #Check for duplicated value

data.drop_duplicates(inplace=True)        #Drop duplicates
print(data.shape)

data['date_added']=pd.to_datetime(data['date_added'])   #Convert 'date_added' to 'datetime'
print(data.head())

print(data.dtypes)  #show data types

data.info()

"""## STEP4:- EXPLORATORY DATA ANALYSIS(EDA)

## **1.Content Type Distribution (Movies vs. TV Shows**)
"""

type_counts = data['type'].value_counts()           #Count the numbers of movies and TV shows
print(type_counts)

data['type'].describe()

#Plot the distribution
plt.figure(figsize=(14,6))
plt.subplot(1, 2, 1)
sns.barplot(x=type_counts.index, y=type_counts.values, hue=type_counts.index, palette='bright',edgecolor='black')
plt.suptitle('Distribution of Content Types (Movies vs. TV Shows)',fontsize=20, fontweight='bold', y=1)
plt.xlabel('Content Type',fontsize=14, labelpad=10)
plt.ylabel('Count',fontsize=14, labelpad=10)
plt.xticks(rotation=45, ha='right')
plt.subplot(1, 2, 2)
plt.pie(type_counts, labels=type_counts.index, autopct='%.0f%%', startangle=90, colors=sns.color_palette('bright'))
plt.tight_layout()
plt.legend(loc=2)
plt.show()

"""## **2.Most Common Genres**"""

df = pd.read_csv("/content/drive/MyDrive/netflix1.csv")
genres = df['listed_in'].str.split(', ').explode()  # Split multiple genres
genre_counts = genres.value_counts()  # Count occurrences
print(genre_counts)

#Plot the most common genres
plt.figure(figsize=(10,8))
sns.barplot(x=genre_counts.values, y=genre_counts.index, hue=genre_counts.index, palette='Greens_r',edgecolor='black')
plt.title('Most Common Genres on Netflix',fontsize=16, fontweight='bold', pad=15)
plt.xlabel('Count',fontsize=14, labelpad=10)
plt.ylabel('Genre',fontsize=14, labelpad=10)
plt.tight_layout()
plt.show()

"""## The Top 10 Genres on Netflix"""

top_10_genres = genre_counts.head(10)
print(top_10_genres)

#Plot the top 10 genres
plt.figure(figsize=(10,8))
ax=sns.barplot(x=top_10_genres.values, y=top_10_genres.index, hue=top_10_genres.index, palette='pastel',edgecolor='black')
plt.title('The Top 10 Genres on Netflix',fontsize=16, fontweight='bold', pad=15)
plt.xlabel('Count',fontsize=14, labelpad=10)
plt.ylabel('Genre',fontsize=14, labelpad=10)
for p in ax.patches:
    ax.text(p.get_width(), p.get_y() + p.get_height()/2,
            int(p.get_width()), ha='left', va='center')
    plt.tight_layout()
plt.show()
#ax.text(x, y, text) → Places the count on the bar
# p.get_width() → Gets the count value (bar length)
# p.get_y() + p.get_height()/2 → Centers the text on the bar

"""## 3.**Content Added Over Time**"""

#Extract year and month from 'date_added'
data['year_added'] = data['date_added'].dt.year
data['month_added'] = data['date_added'].dt.month
# Show only the 'year_added' column
print(data['year_added'])

# Show only the 'month_added' column
print(data['month_added'])

#Plot content added over the years
plt.figure(figsize=(10,6))
ax=sns.countplot(x='year_added', data=data,hue='year_added',legend=False, palette='coolwarm',edgecolor='black')
plt.title('Content Added Over Time(Yearly)',fontsize=16, fontweight='bold', pad=15)
plt.xlabel('Year',fontsize=14, labelpad=10)
plt.ylabel('Count',fontsize=14, labelpad=10)
plt.xticks(rotation=45)
for p in ax.patches:
    height = p.get_height()
    if height > 0:                                                        # Avoid labeling zero-height bars
        ax.text(
            p.get_x() + p.get_width() / 2.,                               # center text on bar
            height + 5,                                                   # slightly above bar
            int(height),                                                  # the count value
            ha="center", fontsize=10
        )

plt.tight_layout()
plt.show()

"""## **4.Top 10 Directors with the Most Titles**"""

#Count titles by director
top_directors = data['director'].value_counts().head(10)
print(top_directors)

#plot top directors
plt.figure(figsize=(10,6))
ax=sns.barplot(x=top_directors.values, y=top_directors.index, hue=top_directors.index, palette='Blues_r',edgecolor='black')
plt.title('Top 10 Directors with the Most Titles',fontsize=16, fontweight='bold', pad=15)
plt.xlabel('Number of Titles',fontsize=14, labelpad=10)
plt.ylabel('Director',fontsize=14, labelpad=10)
for p in ax.patches:
    ax.text(p.get_width(), p.get_y() + p.get_height()/2,
            int(p.get_width()), ha='left', va='center')
    plt.tight_layout()
plt.show()

data.shape

"""## **5.Word Cloud of Movie Titles**"""

#Generate Word Cloud
movie_titles = data[data['type'] == 'Movie']['title']
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(movie_titles))

# Plot the Word Cloud
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.tight_layout()                 # Hide axes
plt.show()

"""## **6.Rating frequency on Netflix**"""

ratings=data['rating'].value_counts()
ratings

ratings = data['rating'].value_counts().reset_index()
ratings.columns = ['rating', 'count']  # Renaming the columns
ratings

#plot rating on netflix
plt.figure(figsize=(10,6))
ax=sns.barplot(x=ratings['rating'], y=ratings['count'],hue=ratings['count'],palette='Blues',edgecolor='black',legend=False)
plt.suptitle('Rating Frequency on Netflix',fontsize=20, fontweight='bold')
plt.xlabel('Rating Types',fontsize=14, labelpad=10)
plt.ylabel('Rating Frequency',fontsize=14, labelpad=10)
plt.xticks(rotation=45)
for p in ax.patches:
    height = p.get_height()
    if height > 0:                                                        # Avoid labeling zero-height bars
        ax.text(
            p.get_x() + p.get_width() / 2.,                               # center text on bar
            height + 7,                                                   # slightly above bar
            int(height),                                                  # the count value
            ha="center", fontsize=10
        )
plt.show()

plt.pie(ratings['count'][:8], labels=ratings['rating'][:8], autopct='%.0f%%', explode=[0,0,0,1,0,0,0,0],startangle=90,colors=sns.color_palette('bright'))
plt.suptitle('Rating Frequency on Netflix',fontsize=16, fontweight='bold')
plt.show()

data.describe()

data['country'].value_counts()

"""## **7.Top 10 countries with most content on Netflix**"""

#plot
top_countries = data['country'].value_counts().head(10)
plt.figure(figsize=(10,6))
ax=sns.barplot(x=top_countries.index, y=top_countries.values, hue=top_countries.values,palette= 'bright', edgecolor='black',legend=False)
plt.title('Top 10 countries with most content on Netflix',fontsize=16, fontweight='bold')
plt.xlabel('Country',fontsize=14, labelpad=10)
plt.ylabel('Frequency',fontsize=14, labelpad=10)
plt.xticks(rotation=45,ha='right')
for p in ax.patches:
    height = p.get_height()
    if height > 0:                                                        # Avoid labeling zero-height bars
        ax.text(
            p.get_x() + p.get_width() / 2.,                               # center text on bar
            height + 5,                                                   # slightly above bar
            int(height),                                                  # the count value
            ha="center", fontsize=10
        )
plt.show()

data['year']=data['date_added'].dt.year
data['month']=data['date_added'].dt.month
data['day']=data['date_added'].dt.day

data['year']

data['month']

data['day']

"""## **8.Monthly releases of Movies and TV shows on Netflix**"""

monthly_movie_release=data[data['type']=='Movie'].groupby('month')['title'].count()
monthly_tv_release=data[data['type']=='TV Show'].groupby('month')['title'].count()
monthly_movie_release

monthly_tv_release

#plot monthly releases of Movies and TV shows on Netflix
plt.figure(figsize=(10,6))
plt.plot(monthly_movie_release.index, monthly_movie_release.values, label='Movies',marker='o')
plt.plot(monthly_tv_release.index, monthly_tv_release.values, label='TV Shows', marker='o')
plt.title('Monthly Releases of Movies and TV Shows on Netflix',fontsize=16, fontweight='bold')
plt.xlabel('Months',fontsize=14, labelpad=10)
plt.ylabel('Number of Releases',fontsize=14, labelpad=10)
plt.legend()
plt.grid(True)
plt.xticks(range(1,13),['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])
plt.show()

"""## **9.Yearly releases of Movies and TV Shows on Netflix**"""

#Plot for Yearly releases of Movies and TV Shows on Netflix
yearly_movie_release=data[data['type']=='Movie'].groupby('year')['title'].count()
yearly_tv_release=data[data['type']=='TV Show'].groupby('year')['title'].count()
yearly_movie_release

yearly_tv_release

#Plot for Yearly releases of Movies and TV Shows on Netflix
plt.figure(figsize=(10,6))
plt.plot(yearly_movie_release.index, yearly_movie_release.values, label='Movies',marker='o')
plt.plot(yearly_tv_release.index, yearly_tv_release.values, label='TV Shows', marker='o')
plt.title('Yearly Releases of Movies and TV Shows on Netflix',fontsize=16, fontweight='bold')
plt.xlabel('Years',fontsize=14, labelpad=10)
plt.ylabel('Number of Releases',fontsize=14, labelpad=10)
plt.legend()
plt.grid(True)
plt.show()

"""## **10.Top 10 popular movie genres**"""

popular_movies = data[data['type'] == 'Movie']
popular_movies['listed_in'] = popular_movies['listed_in'].str.split(', ')
popular_movies = popular_movies.explode('listed_in')
popular_movies

popular_movies_genre=data[data['type']=='Movie'].groupby("listed_in").size().sort_values(ascending=False)[:10]
popular_movies_genre

#plot for top 10 popular movie genres
#popular_movies_genres = popular_movies['listed_in'].value_counts().head(10)
#popular_movies_genres

#plot for top 10 popular movie genres
plt.figure(figsize=(10,6))
ax=sns.barplot(x=popular_movies_genre.index, y=popular_movies_genre.values, hue=popular_movies_genre.values, palette='Blues',edgecolor='black',legend=False)
plt.title('Top 10 Popular Genres for Movies on Netflix',fontsize=16, fontweight='bold')
plt.xlabel('Genres',fontsize=14, labelpad=10)
plt.ylabel('Movie Frequency',fontsize=14, labelpad=10)
plt.xticks(rotation=45, ha='right')
for p in ax.patches:
    height = p.get_height()
    if height > 0:                                                        # Avoid labeling zero-height bars
        ax.text(
            p.get_x() + p.get_width() / 2.,                               # center text on bar
            height + 5,                                                   # slightly above bar
            int(height),                                                  # the count value
            ha="center", fontsize=10
        )
plt.show()

#plot for top 10 popular movie genres more clearly
popular_movies_genres = popular_movies['listed_in'].value_counts().head(10)
popular_movies_genres

plt.figure(figsize=(10,6))
ax=sns.barplot(x=popular_movies_genres.index, y=popular_movies_genres.values, hue=popular_movies_genres.values, palette='Blues',edgecolor='black',legend=False)
plt.title('Top 10 Popular Genres for Movies on Netflix',fontsize=16, fontweight='bold')
plt.xlabel('Genres',fontsize=14, labelpad=10)
plt.ylabel('Movie Frequency',fontsize=14, labelpad=10)
plt.xticks(rotation=45, ha='right')
for p in ax.patches:
    height = p.get_height()
    if height > 0:                                                        # Avoid labeling zero-height bars
        ax.text(
            p.get_x() + p.get_width() / 2.,                               # center text on bar
            height + 10,                                                   # slightly above bar
            int(height),                                                  # the count value
            ha="center", fontsize=10
        )
plt.show()

#plot for top 10 popular TV genres
popular_series_genre=data[data['type']=='TV Show']['listed_in'].str.split(', ').explode().value_counts().head(10)
popular_series_genre

#plot for top 10 popular TV genres
plt.figure(figsize=(8,6))
ax=sns.barplot(x=popular_series_genre.index, y=popular_series_genre.values, hue=popular_series_genre.values, palette='Blues',edgecolor='black',legend=False)
plt.title('Top 10 Popular TV Genres on Netflix',fontsize=16, fontweight='bold')
plt.xlabel('Genres',fontsize=14, labelpad=10)
plt.ylabel('TV Show Frequency',fontsize=14, labelpad=10)
plt.xticks(rotation=45, ha='right')
for p in ax.patches:
    height = p.get_height()
    if height > 0:                                                        # Avoid labeling zero-height bars
        ax.text(
            p.get_x() + p.get_width() / 2.,                               # center text on bar
            height + 10,                                                   # slightly above bar
            int(height),                                                  # the count value
            ha="center", fontsize=10
        )
plt.show()

"""## **11.Top 15 directors across Netflix with high frequency of movies and shows**"""

directors=data['director'].value_counts().reset_index()[1:15]
directors

directors=data['director'].value_counts().reset_index().sort_values(by='count',ascending=False)[1:15]
directors

# Plot for Top 15 directors across Netflix with high frequency of movies and shows
plt.figure(figsize=(10,6))
ax=sns.barplot(x=directors['director'], y=directors['count'], hue=directors['count'], palette='deep',edgecolor='black',legend=False)
plt.xlabel('Directors',fontsize=14, labelpad=10)
plt.ylabel('Frequency',fontsize=14, labelpad=10)
plt.title('Top 15 Directors with High Frequency of Movies and Shows on Netflix',fontsize=16, fontweight='bold')
plt.xticks(rotation=45,ha='right')
#Add number labels on top of bars
for p in ax.patches:
    height = p.get_height()
    if height > 0:
        ax.text(
            p.get_x() + p.get_width() / 2.,
            height + (max(directors['count']) * 0.01),            # dynamic spacing
            int(height),
            ha='center',
            va='bottom',
            fontsize=10
        )

# Expand y-limit to fit text
plt.ylim(0, max(directors['count']) + max(directors['count']) * 0.15)
plt.tight_layout()
plt.show()

"""## **12.Final Conclusion**"""

import textwrap

# List of conclusion points
conclusions = [
    "The analysis shows that Movies are more prevalent on the platform than TV Shows.",
    "The most common genres are Drama and Comedy, indicating a preference for entertaining content.",
    "Content production has increased significantly after 2015, reflecting a rise in streaming demand.",
    "Most TV Shows have multiple seasons, while Movies are usually standalone.",
    "International TV shows and International Movies are top Genres on Netflix.",
    "The United States produces the highest number of titles, followed by India and the UK.",
    "Spain has the least amount of content available on Netflix among the listed countries.",
    "Most movies are released in the month of July, indicating a possible seasonal trend.",
    "TV shows reach their release peak in December and July, suggesting higher viewer engagement during holidays or breaks.",
    "Rajiv Chilaka emerges as the top director with the highest number of titles on the platform."
]

# Print each point in a formatted way
print("\n" + "="*50)
print("PROJECT CONCLUSION".center(50))
print("="*50 + "\n")

for i, point in enumerate(conclusions, start=1):
    wrapped_text = textwrap.fill(f"{i}. {point}", width=80)
    print(wrapped_text + "\n")

print("="*50)

"""---
**Project Completed By:**  
**Nitu Dave**  
*Google Data Analytics Certified | MSc Physics | Data Enthusiast*

"""