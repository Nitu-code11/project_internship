# -*- coding: utf-8 -*-
"""final-Regulatory Affairs of Road Accident Data 2020 India  projects3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PtTNSBz8a3Ab6HFNYS7apjMAMDQryk5K

#**PROJECT 3 - REGULATORY AFFAIRS OF ROAD ACCIDENT DATA 2020 INDIA**
## Analysis of Road Accident Causes and Outcomes in Million-Plus Cities of India(2020)

# **Import Required Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

"""# **Load the dataset**"""

data=pd.read_csv('/content/drive/MyDrive/Regulatory Affairs of Road Accident Data 2020 India.csv')
data.head()

data.tail()

#total 0f count values
data['Count'].sum()

data.describe()

data.info()

data['Cause category'].value_counts()

data['Cause category'].describe()

data['Cause Subcategory'].value_counts()

data['Cause Subcategory'].describe()

data['Million Plus Cities'].value_counts()

data['Million Plus Cities'].describe()

data['Outcome of Incident'].value_counts()

data['Outcome of Incident'].describe()

data['Count'].describe()

data.shape

data.size

data.head()

data.tail()

"""# **Data Cleaning**"""

#Check for missing values
print(data.isnull().sum())

#replace all missing (NaN) values with 0
data.fillna(0, inplace=True)

print(data.isnull().sum())

#Check for duplicate values
print(data.duplicated().sum())

print(data.shape)

#Drop Duplicates(if any)
data.drop_duplicates(inplace=True)
print(data.shape)

data.dtypes

#convert column in Category type
data['Cause category'] = data['Cause category'].astype('category')
data['Cause Subcategory'] = data['Cause Subcategory'].astype('category')
data['Million Plus Cities'] = data['Million Plus Cities'].astype('category')
data['Outcome of Incident']= data['Outcome of Incident'].astype('category')

data.dtypes

data.info()

data.columns

data.info()

data.shape

data['Cause Subcategory'].value_counts()

"""# **Exploratory Data Analysis(EDA)**"""

#Distribution of Road Accidents in Million Plus Cities
cities_count=data.groupby('Million Plus Cities')['Count'].sum().reset_index()
cities_count.columns = ['Cities', 'Count']
# Sort cities by accident count (descending)
cities_count = cities_count.sort_values(by='Count', ascending=False).reset_index(drop=True)
print(cities_count)

# Get total sum of the 'Count' column
total_count = data['Count'].sum()

print("Total Count:", total_count)

#Distribution of Road Accidents in Million Plus Cities
plt.figure(figsize=(12,10))
ax=sns.barplot(x='Cities',y='Count',data=cities_count,hue='Cities',palette='bright',edgecolor='black',legend=False)
plt.title('Distribution of Road Accidents in Million Plus Cities',fontsize=15, fontweight='bold',color='green')
plt.xlabel('Cities',fontsize=12)
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xticks(rotation=90)
for p in ax.patches:
    height = p.get_height()
    if height > 0:
        ax.text(
            p.get_x() + p.get_width() / 2,                # center horizontally
            height / 2,                                   # middle vertically inside the bar
            int(height),                                  # the count value
            rotation=90 ,
            ha="center", va="center",                     # center alignment
            fontsize=7, color='black'                     # white text inside colored bar
        )

plt.tight_layout()
plt.show()

#Distribution of Road Accidents in Million Plus Cities
plt.figure(figsize=(12,12))
ax=sns.barplot(x='Cities',y='Count',data=cities_count,hue='Cities',palette='bright',edgecolor='black',legend=False)
plt.title('Distribution of Road Accidents in Million Plus Cities',fontsize=15, fontweight='bold',color='green')
plt.xlabel('Cities',fontsize=12)
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xticks(rotation=90)
for bar in ax.patches:  # 'ax' is your seaborn plot
    height = bar.get_height()
    if height > 0:
        ax.text(
            bar.get_x() + bar.get_width() / 2,           # horizontal center of bar
            height + (height/2 * 0.03),                  # slightly above the bar
            str(int(height)),
            ha='center',
            va='bottom',
            fontsize=7,
            rotation=90,                                 # vertical text
            color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Distribution of Road Accidents in Million Plus Cities
plt.figure(figsize=(12,10))
bars=plt.bar(x='Cities',height='Count',data=cities_count,color='g',edgecolor='black')
plt.title('Distribution of Road Accidents in Million Plus Cities',fontsize=15,fontweight='bold',color='green')
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xlabel('Cities',fontsize=12,labelpad=10)
plt.xticks(rotation=90)
for bar in bars:                 # Add vertical labels inside bars
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,                 # Middle of the bar
            str(int(height)),
            ha='center',
            va='center',
            fontsize=5,
            rotation=90,                 # Vertical text
            color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Distribution of Road Accidents in Million Plus Cities
plt.figure(figsize=(12,12))
bars=plt.bar(x='Cities',height='Count',data=cities_count,color='g',edgecolor='purple')
plt.title('Distribution of Road Accidents in Million Plus Cities',fontsize=15,fontweight='bold',color='green')
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xlabel('Cities',fontsize=12,labelpad=10)
plt.xticks(rotation=90)
for bar in bars:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,              # horizontal center of the bar
            height + (height/2 * 0.02),                     # slightly above the bar
            str(int(height)),                               # value as string
            ha='center',
            va='bottom',
            fontsize=7,
            rotation=90,                                    # vertical text
            color='black',
            fontweight='bold'
        )

plt.tight_layout()
plt.show()

#Top 10 Million Plus Cities by Number of Road Accidents in 2020
# Sort cities by accident count (descending)
Top10_cities = cities_count.sort_values(by='Count', ascending=False).head(10)
Top10_cities

#Top 10 Million Plus Cities by Number of Road Accidents in 2020
plt.figure(figsize=(8,6))
bars=plt.bar(x='Cities',height='Count',data=Top10_cities,color='g',edgecolor='black')
plt.title('Top 10 Million Plus Cities by Number of Road Accidents in 2020',fontsize=13,fontweight='bold',color='green')
plt.xlabel('Cities',fontsize=12,labelpad=10)
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xticks(rotation=90)
for bar in bars:                 # Add vertical labels inside bars
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,                 # Middle of the bar
            str(int(height)),
            ha='center',
            va='center',
            fontsize=10,
            rotation=90,                 # Vertical text
            color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Top 10 Least Accident-Prone Million Plus Cities in 2020
# Sort cities by accident count (ascending)
Top10_leastcities = cities_count.sort_values(by='Count', ascending=True).head(10)
Top10_leastcities

#Top 10 Least Accident-Prone Million Plus Cities in 2020
plt.figure(figsize=(8,6))
bars=plt.bar(x='Cities',height='Count',data=Top10_leastcities,color='g',edgecolor='black')
plt.title('Top 10 Least Accident-Prone Million Plus Cities in 2020',fontsize=13,fontweight='bold',color='green')
plt.xlabel('Cities',fontsize=12,labelpad=10)
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xticks(rotation=90)
for bar in bars:                 # Add vertical labels inside bars
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,                 # Middle of the bar
            str(int(height)),
            ha='center',
            va='center',
            fontsize=10,
            rotation=90,                 # Vertical text
            color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

"""**Analysis of Accident Causes**"""

#Distribution of Road Accidents by Cause category
causecategory_count=data.groupby('Cause category')['Count'].sum().reset_index()
causecategory_count.columns = ['Cause category', 'Count']
# Sort cities by accident count (descending)
causecategory_count = causecategory_count.sort_values(by='Count', ascending=False).reset_index(drop=True)
print(causecategory_count)

#total sum of cause category count
causecategory_count['Count'].sum()

#Distribution of Road Accidents by Cause category
plt.figure(figsize=(8,6))
ax=sns.barplot(x='Cause category',y='Count',hue='Cause category', legend = False,data=causecategory_count,palette='bright',edgecolor='black')
plt.title('Distribution of Road Accidents by Cause category',fontsize=15, fontweight='bold',color='green')
plt.xlabel('Cause category',fontsize=12)
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xticks(rotation=90)
for p in ax.patches:
    height = p.get_height()
    if height > 0:
        ax.text(
            p.get_x() + p.get_width() / 2,                # center horizontally
            height / 2,                                   # middle vertically inside the bar
            int(height),                                  # the count value
            rotation=90 ,
            ha="center", va="center",                     # center alignment
            fontsize=10, color='black',                    # black text inside colored bar
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Distribution of Road Accidents by Cause subcategory
cause_subcategory_count=data.groupby('Cause Subcategory')['Count'].sum().reset_index()
cause_subcategory_count.columns = ['Cause Subcategory', 'Count']
# Sort cities by accident count (descending)
cause_subcategory_count = cause_subcategory_count.sort_values(by='Count', ascending=False).reset_index(drop=True)
print(cause_subcategory_count)

#total sum of cause subcategory count
cause_subcategory_count['Count'].sum()

#Distribution of Road Accidents by Cause subcategory
plt.figure(figsize=(10,15))
bars=plt.bar(x='Cause Subcategory',height='Count',data=cause_subcategory_count,color='g',edgecolor='black')
plt.title('Distribution of Road Accidents by Cause subcategory',fontsize=15,fontweight='bold',color='green')
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xlabel('Cause Subcategory',fontsize=12,labelpad=10)
plt.xticks(rotation=90)
for bar in bars:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,              # horizontal center of the bar
            height + (height/4 * 0.05-0.1),                     # slightly above the bar
            str(int(height)),                               # value as string
            ha='center',
            va='bottom',
            fontsize=7,
            rotation=90,                                    # vertical text
            color='black',
            fontweight='bold'
        )

plt.tight_layout()
plt.show()

#Top 10 Accident Cause Subcategories in India (2020)
Top10_causesubcategory = cause_subcategory_count.sort_values(by='Count', ascending=False).head(10)
Top10_causesubcategory

#Top 10 Accident Cause Subcategories in India (2020)
plt.figure(figsize=(8,6))
bars=plt.bar(x='Cause Subcategory',height='Count',data=Top10_causesubcategory,color='g',edgecolor='black')
plt.title('Top 10 Accident Cause Subcategories in India (2020)',fontsize=13,fontweight='bold',color='green')
plt.xlabel('Cause Subcategory',fontsize=12,labelpad=10)
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xticks(rotation=90,fontsize=10,fontweight='bold')
plt.yticks(fontsize=10,fontweight='bold')
for bar in bars:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,              # horizontal center of the bar
            height + (height/5 * 0.03),                     # slightly above the bar
            str(int(height)),                               # value as string
            ha='center',
            va='bottom',
            fontsize=8,
            color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Outcomes of Road Accidents
outcome_count=data.groupby('Outcome of Incident')['Count'].sum().reset_index()
outcome_count.columns = ['Outcome of Incident', 'Count']
# Sort cities by accident count (descending)
outcome_count = outcome_count.sort_values(by='Count', ascending=False).reset_index(drop=True)
print(outcome_count)

#total sum of outcome of incident count
outcome_count['Count'].sum()

#Outcomes of Road Accidents
plt.figure(figsize=(8,8))
bars=plt.bar(x='Outcome of Incident',height='Count',data=outcome_count,color='g',edgecolor='black')
plt.title('Outcomes of Road Accidents',fontsize=15,fontweight='bold',color='green')
plt.ylabel('Number of Accidents',fontsize=12,labelpad=10)
plt.xlabel('Outcome of Incident',fontsize=12,labelpad=10)
plt.xticks(rotation=90,fontsize=10,fontweight='bold')
plt.yticks(fontsize=10,fontweight='bold')
for bar in bars:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,              # horizontal center of the bar
            height + (height/4 * 0.02-0.04),
            str(int(height)),                               # value as string
            ha='center',
            va='bottom',
            fontsize=10,
            color='black',
            fontweight='bold'
        )
        plt.tight_layout()
plt.show()

"""**Analyzing Accident Causes vs Outcomes**"""

cause_outcome = data.groupby(['Cause category', 'Outcome of Incident'])['Count'].sum().reset_index()
cause_outcome

#Distribution of Outcomes by Cause category of Road Accidents (2020)
plt.figure(figsize=(16, 10))
ax=sns.barplot(data=cause_outcome, x='Cause category', y='Count', hue='Outcome of Incident',edgecolor='black', palette='bright')
plt.title('Distribution of Outcomes by Cause category of Road Accidents (2020)',
          fontsize=15, fontweight='bold',color='green')
plt.xlabel('Cause category',fontsize=14,labelpad=10)
plt.ylabel('Number of Accidents',fontsize=14,labelpad=10)
plt.xticks(rotation=45,fontsize=12,fontweight='bold', ha='right')
plt.yticks(fontsize=12,fontweight='bold')
plt.legend(title='Outcome')
for p in ax.patches:
    height = p.get_height()
    if height > 0:
        ax.text(
            p.get_x() + p.get_width() / 2,                # center horizontally
            height / 2,                                   # middle vertically inside the bar
            int(height),                                  # the count value
            rotation=90 ,
            ha="center", va="center",                     # center alignment
            fontsize=10, color='white',                    # white text inside colored bar
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

"""# **PROJECT CONCLUSION:-**"""

import textwrap

conclusions = [

   " Overall Summary:-\n"
    "Total Accidents:989333\n",
    "Total Injured: 252575 ,Grievously injured: 123192, Minor injury: 179898\n",
    " Total Killed: 81252\n",


    "Highest Accident-Prone Cities: Chennai, Delhi, Jabalpur, Bengaluru\n",
    "Least Accident-Prone Cities: Amritsar, Jamshedpur, Dhanbad\n\n",

    " Top Cause Categories:-\n"
    "Junction, Road Features, Traffic Control, Traffic Violation, Weather\n\n",

    " Leading Subcategories:-\n"
    "Others, Sunny / Clear, Over, Straight Road, Two-Wheelers\n\n",

    "Recommendations:-\n"
    "Enforce speed limits and helmet laws in high-risk cities, Upgrade junction design ,Road features and traffic control, Promote two-wheeler safety,Run awareness campaigns on speeding and violations"
]

# Print each point in a formatted way
print("\n" + "="*50)
print("PROJECT CONCLUSION".center(50))
print("="*50+ "\n")

for i, point in enumerate(conclusions, start=1):
    wrapped_text = textwrap.fill(f"{i}. {point}", width=80)
    print(wrapped_text + "\n")


print("="*50)

"""---
**Project Completed By:**  
**Nitu Dave**  
*Google Data Analytics Certified | MSc Physics | Data Enthusiast*

"""