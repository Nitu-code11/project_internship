# -*- coding: utf-8 -*-
"""Supermart Grocery Sales - Retail Analytics Dataset project4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ehLGzIBUsqDLDxkmO3sy2MpGcoAv-4Dl

# **PROJECT 4 :- SUPERMART GROCERY SALES - RETAIL ANALYTICS DATASET**

# **Import Required Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

"""# **Load the Dataset**"""

data=pd.read_csv('/content/drive/MyDrive/Supermart Grocery Sales - Retail Analytics Dataset.csv')
data.head()

data.info()

data.describe()

data.shape

data.columns

data['Order ID'].describe()

data['Order ID'].value_counts()

data['Customer Name'].describe()

data['Customer Name'].value_counts()

data['Category'].describe()

data['Category'].value_counts()

data['Sub Category'].describe()

data['Sub Category'].value_counts()

data['City'].describe()

data['City'].value_counts()

data['Order Date'].describe()

data['Order Date'].value_counts()

data['Region'].describe()

data['Region'].value_counts()

data['Sales'].describe()

data['Sales'].value_counts()

data['State'].describe()

data['State'].value_counts()

data['Discount'].describe()

data['Discount'].value_counts()

data['Profit'].describe()

data['Profit'].value_counts()

data.size

data.tail()

"""# **Data Cleaning**"""

#check for null values
data.isnull().sum()

#drop missing values
data.dropna(inplace=True)

print(data.isnull().sum().sum())

#Check for duplicate values
print(data.duplicated().sum())

data.shape

#drop duplicates
data.drop_duplicates(inplace=True)

data.shape

data.info()

#Convert Order Date Columns to datatime format
data['Order Date']=pd.to_datetime(data['Order Date'], format='mixed', dayfirst=False, errors='coerce')
data.dtypes

#data['Order Date']=pd.to_datetime(data['Order Date'])

data.head()

data.tail()

#Extract day,month and year from 'Order Date'
data['Order Day'] = data['Order Date'].dt.day
data['Order Month'] = data['Order Date'].dt.month
data['Order Year'] = data['Order Date'].dt.year
data.head()

"""# **Exploratory Data Analysis**"""

#Total Sales
total_sales=data['Sales'].sum()
total_sales

#Plot Sales trend over year
sales_trend=data.groupby('Order Year')['Sales'].sum()
sales_trend

#Plot Sales trend over time (pie chart)
plt.figure(figsize=(6,6))
plt.pie(sales_trend,labels=sales_trend.index,autopct='%0.0f%%',startangle=90,colors=sns.color_palette('bright'),textprops={'fontweight': 'bold'})
plt.title('Sales Trend Over Year',fontsize=15,fontweight='bold',color='darkgreen')
plt.tight_layout()
plt.show()

#Plot profit over year
profit_trend=data.groupby('Order Year')['Profit'].sum()
profit_trend

#Profit and Sales trend over years
fig, axes = plt.subplots(1, 2, figsize=(10, 6))  # 1 row, 2 columns
# Pie for Sales
axes[0].pie(sales_trend,  labels=sales_trend.index,  autopct='%0.0f%%', startangle=90, colors=sns.color_palette('bright'),
    textprops={'fontweight': 'bold'})
axes[0].set_title('Sales Trend Over Years', fontsize=14, fontweight='bold', color='darkblue')
# Pie for Profit
axes[1].pie(profit_trend, labels=profit_trend.index, autopct='%0.0f%%', startangle=90, colors=sns.color_palette('pastel'),
    textprops={'fontweight': 'bold'})
axes[1].set_title('Profit Trend Over Years', fontsize=14, fontweight='bold', color='darkgreen')
plt.tight_layout()
plt.show()

#Plot Sales by Category
sales_category=data.groupby('Category')['Sales'].sum().sort_values(ascending=False)
sales_category

#Total sum of sales of sales_category
total_sales_category=sales_category.sum()
total_sales_category

#Plot Sales by Category
plt.figure(figsize=(8,6))
bars=sns.barplot(x=sales_category.index,y=sales_category.values,hue=sales_category.index,palette='viridis',edgecolor='black',legend=False)
plt.title('Category-wise Sales Distribution',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('Sales',fontsize=12,labelpad=10)
plt.xlabel('Category',fontsize=12,labelpad=10)
plt.xticks(rotation=90,fontweight='bold')
for bar in bars.patches:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,
            str(int(height)),
            ha='center',
            va='center',
            fontsize=10,
            rotation=90,
            color='white',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Plot sales by subcategory
sales_subcategory=data.groupby('Sub Category')['Sales'].sum().sort_values(ascending=False)
sales_subcategory

#Plot sales by subcategory
plt.figure(figsize=(10,6))
bars=sns.barplot(y=sales_subcategory.index,x=sales_subcategory.values,hue=sales_subcategory.index,palette='viridis',edgecolor='black',legend=False)
plt.title('Sub Category-wise Sales Distribution',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('Sub Category',fontsize=12,labelpad=10)
plt.xlabel('Sales',fontsize=12,labelpad=10)
plt.yticks(fontsize=10,fontweight='bold')
plt.xticks(fontweight='bold')
for bar in bars.patches:
    width = bar.get_width()
    if width > 0:
        plt.text(
            width * 0.5,                                                         # Middle of the bar
            bar.get_y() + bar.get_height() / 2,
            str(int(width)),                                                     # Value as integer
            ha='center', va='center',
            fontsize=8, color='white',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Top 10 Subcategory-wise sales distribution
top_10_subcategory=sales_subcategory.head(10)
top_10_subcategory

#Plot Top 10 Sub-Category-wise Sales Distribution
plt.figure(figsize=(8,6))
bars=sns.barplot(x=top_10_subcategory.index,y=top_10_subcategory.values,hue=top_10_subcategory.index,edgecolor='black',legend=False)
palette=sns.color_palette("rocket", n_colors=10)
plt.title('Top 10 Sub-Category-wise Sales Distribution',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('Sales',fontsize=12,labelpad=10)
plt.xlabel('Subcategory',fontsize=12,labelpad=10)
plt.xticks(rotation=90,fontweight='bold')
plt.yticks(fontweight='bold')
for bar in bars.patches:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,str(int(height)),
            ha='center', va='center',
            fontsize=10,rotation=90,
            color='white',fontweight='bold'
        )
plt.tight_layout()
plt.show()

data.columns

#Plot City-wise Sales Distribution
sales_by_city= data.groupby('City')['Sales'].sum().sort_values(ascending=False)
sales_by_city

#Plot City-wise Sales Distribution
plt.figure(figsize=(10,6))
bars=sns.barplot(y=sales_by_city.index,x=sales_by_city.values,hue=sales_by_city.index,palette='Set2',edgecolor='black',legend=False)
plt.title('City-wise Sales Distribution',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('City',fontsize=12,labelpad=10)
plt.xlabel('Sales',fontsize=12,labelpad=10)
plt.xticks(fontweight='bold')
plt.yticks(fontsize=10,fontweight='bold')
for bar in bars.patches:
    width = bar.get_width()
    if width > 0:
        plt.text(
            width * 0.5,                                                         # Middle of the bar
            bar.get_y() + bar.get_height() / 2,
            str(int(width)),                                                     # Value as integer
            ha='center', va='center',
            fontsize=8, color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Top 10 Cities by Sales
top10_cities=sales_by_city.head(10)
top10_cities

#Plot Top 10 Cities by Sales
plt.figure(figsize=(8,6))
bars=sns.barplot(x=top10_cities.index,y=top10_cities.values,hue=top10_cities.index,palette='Set2',edgecolor='black',legend=False)
plt.title('Top 10 Cities by Sales',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('Sales',fontsize=12,labelpad=10,fontweight='bold')
plt.xlabel('City',fontsize=12,labelpad=10,fontweight='bold')
plt.xticks(rotation=45,fontweight='bold')
plt.yticks(fontweight='bold')
for bar in bars.patches:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,
            str(int(height)),
            ha='center', va='center',fontsize=10,
            rotation=90,color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#plot Sales Performance Across Regions
sales_by_region=data.groupby('Region')['Sales'].sum().sort_values(ascending=False)
sales_by_region

# Plot Sales Performance Across Regions
plt.figure(figsize=(8,6))
ax=sns.barplot(x=sales_by_region.index,y=sales_by_region.values,hue=sales_by_region.index,palette='Set2',edgecolor='black',legend=False)
plt.title('Sales Performance Across Region',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('Sales',fontsize=12,labelpad=10,fontweight='bold')
plt.xlabel('Region',fontsize=12,labelpad=10,fontweight='bold')
plt.xticks(rotation=45,fontweight='bold')
plt.yticks(fontweight='bold')
for p in ax.patches:
    height = p.get_height()
    if height > 0:                                                        # Avoid labeling zero-height bars
        ax.text(
            p.get_x() + p.get_width() / 2.,                               # center text on bar
            height + 15,                                                   # slightly above bar
            int(height),                                                  # the count value
            ha="center", fontsize=10,fontweight='bold',
            color="black"
        )
plt.tight_layout()
plt.show()

#plot profit by category
profit_by_category = data.groupby('Category')['Profit'].sum().sort_values(ascending=False)
profit_by_category

#plot profit by category
plt.figure(figsize=(10,6))
bars=sns.barplot(x=profit_by_category.index, y=profit_by_category.values,hue=profit_by_category.index, palette='bright',edgecolor='black', legend=False)
plt.title('Comparative Profit Analysis by Category',fontsize=15,fontweight='bold',color='darkgreen')
plt.xlabel('Category',fontsize=12,fontweight='bold')
plt.ylabel('Profit',fontsize=12,fontweight='bold')
plt.yticks(fontweight='bold')
plt.xticks(rotation=90,fontweight='bold')
for bar in bars.patches:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,
            str(int(height)),
            ha='center', va='center',fontsize=10,
            rotation=90,color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Plot Profit Analysis by Sub-category
profit_by_subcategory = data.groupby('Sub Category')['Profit'].sum().sort_values(ascending=False)
profit_by_subcategory

#Plot Profit Analysis by Sub-category
plt.figure(figsize=(10,6))
bars=sns.barplot(y=profit_by_subcategory.index,x=profit_by_subcategory.values,hue=profit_by_subcategory.index,palette='deep',edgecolor='black',legend=False)
plt.title('Comparative Profit Analysis by Sub-Category',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('Sub Category',fontsize=12,labelpad=10)
plt.xlabel('Profit',fontsize=12,labelpad=10)
plt.yticks(fontsize=10,fontweight='bold')
plt.xticks(fontweight='bold')
for bar in bars.patches:
    width = bar.get_width()
    if width > 0:
        plt.text(
            width * 0.5,                                                         # Middle of the bar
            bar.get_y() + bar.get_height() / 2,
            str(int(width)),                                                     # Value as integer
            ha='center', va='center',
            fontsize=8, color='white',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Plot Top 10 Sub-Category-wise Profit Distribution
top10_subcateg_profit=profit_by_subcategory.head(10)
top10_subcateg_profit

#Plot Top 10 Sub-Category-wise Profit Distribution
plt.figure(figsize=(8,6))
bars=sns.barplot(y=top10_subcateg_profit.values,x=top10_subcateg_profit.index,hue=top10_subcateg_profit.index,palette='bright',edgecolor='black',legend=False)
plt.title('Top 10 Sub-Category-wise Profit Distribution',fontsize=15,fontweight='bold',color='darkgreen')
plt.xlabel('Sub Category',fontsize=12,labelpad=10)
plt.ylabel('Profit',fontsize=12,labelpad=10)
plt.xticks(rotation=75,fontweight='bold')
plt.yticks(fontsize=10,fontweight='bold')
for bar in bars.patches:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,
            str(int(height)),
            ha='center', va='center',
            fontsize=10,rotation=90,
            color='black', fontweight='bold'
        )
plt.tight_layout()
plt.show()

#City wise profit distribution
profit_by_city=data.groupby('City')['Profit'].sum().sort_values(ascending=False)
profit_by_city

#Plot City-wise Profit Distribution
plt.figure(figsize=(10,6))
bars=sns.barplot(y=profit_by_city.index,x=profit_by_city.values,hue=profit_by_city.index,palette='Set2',edgecolor='black',legend=False)
plt.title('City-wise Profit Distribution',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('City',fontsize=12,labelpad=10)
plt.xlabel('Profit',fontsize=12,labelpad=10)
plt.xticks(fontweight='bold')
plt.yticks(fontsize=10,fontweight='bold')
for bar in bars.patches:
    width = bar.get_width()
    if width > 0:
        plt.text(
            width * 0.5,                                                         # Middle of the bar
            bar.get_y() + bar.get_height() / 2,
            str(int(width)),                                                     # Value as integer
            ha='center', va='center',
            fontsize=8, color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Top 10 City by ptofit
top10_city_profit=profit_by_city.head(10)
top10_city_profit

#Top 10 city by profit
plt.figure(figsize=(8,6))
bars=sns.barplot(x=top10_city_profit.index,y=top10_city_profit.values,hue=top10_city_profit.index,palette='Set2',edgecolor='black',legend=False)
plt.title('Top 10 City by Profit',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('Profit',fontsize=12,labelpad=10)
plt.xlabel('City',fontsize=12,labelpad=10)
plt.xticks(rotation=75,fontweight='bold')
plt.yticks(fontweight='bold')
for bar in bars.patches:
    height = bar.get_height()
    if height > 0:
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            height * 0.5,
            str(int(height)),
            ha='center', va='center',fontsize=10,
            rotation=90,color='black',
            fontweight='bold'
        )
plt.tight_layout()
plt.show()

#Plot Region vs profit
profit_by_region=data.groupby('Region')['Profit'].sum().sort_values(ascending=False)
profit_by_region

#Plot region vs profit
plt.figure(figsize=(8,6))
ax=sns.barplot(x=profit_by_region.index,y=profit_by_region.values,hue=profit_by_region.index,palette='Set2',edgecolor='black',legend=False)
plt.title('Comparative Profit Analysis by Region',fontsize=15,fontweight='bold',color='darkgreen')
plt.ylabel('Profit',fontsize=12,labelpad=10,fontweight='bold')
plt.xlabel('Region',fontsize=12,labelpad=10,fontweight='bold')
plt.xticks(rotation=45,fontweight='bold')
plt.yticks(fontweight='bold')
for p in ax.patches:
    height = p.get_height()
    if height > 0:                                                              # Avoid labeling zero-height bars
         ax.text(
            p.get_x() + p.get_width() / 2.,                               # center text on bar
            height + 15,                                                   # slightly above bar
            int(height),                                                  # the count value
            ha="center", fontsize=10,fontweight='bold',
            color="black"
        )
plt.tight_layout()
plt.show()

#Dataframe having sales,profit and region wise sum in order
sales_profit_region=data.groupby('Region')[['Sales','Profit']].sum()
sales_profit_region

#Plot comparative Sales & Profit analysis by Region
ax=sales_profit_region.plot(kind='bar', figsize=(10, 6), edgecolor='black', colormap='Accent')

plt.title('Sales and Profit by Region', fontsize=14, fontweight='bold')
plt.xlabel('Region', fontsize=12)
plt.ylabel('Amount', fontsize=12)
plt.xticks(rotation=0, fontweight='bold')
# Add value labels on each bar
for container in ax.containers:
    ax.bar_label(container, fmt='%.0f', fontsize=8,fontweight='bold')
plt.legend(title='Metric')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,6))

# Plot Sales and Profit
plt.plot(sales_profit_region.index, sales_profit_region['Sales'], label='Sales', marker='o')
plt.plot(sales_profit_region.index, sales_profit_region['Profit'], label='Profit', marker='o')
# Add value labels for Sales
for i, value in enumerate(sales_profit_region['Sales']):
    plt.text(sales_profit_region.index[i], value + value * 0.02, f'{int(value)}',
             ha='center', fontsize=9, fontweight='bold', color='blue')

# Add value labels for Profit
for i, value in enumerate(sales_profit_region['Profit']):
    plt.text(sales_profit_region.index[i], value - value * 0.55, f'{int(value)}',
             ha='center', fontsize=9, fontweight='bold', color='orange')

# Titles and labels
plt.title('Sales and Profit by Region', fontsize=16, fontweight='bold',color='darkgreen')
plt.xlabel('Region', fontsize=14, labelpad=10)
plt.ylabel('Amount', fontsize=14, labelpad=10)
plt.legend()
plt.xticks(fontweight='bold')
plt.yticks(fontweight='bold')
plt.tight_layout()
plt.show()

"""# **PROJECT CONCLUSION**"""

import textwrap

conclusions = [
 "Sales and profit have shown steady year-on-year growth, indicating a healthy business trajectory.\n",

 "Year 2018 recorded the highest sales and profit, marking the most successful performance period.\n",

 "Top-selling category: Eggs, Meat & Fish.\n",

"Most profitable category: Snacks.\n",

 "Best-performing sub-category (both sales & profit): Health Drinks – shows growing interest in wellness products.\n",

 "City-wise insights:Highest sales: Kanyakumari  Highest profit: Vellore\n",

 "Regional insights: Western Tamil Nadu had the highest sales and profit, showing strong market presence.\n",
   "Northern Tamil Nadu recorded the lowest sales and profit.\n"
]
# Print each point in a formatted way
print("\n" + "="*50)
print("PROJECT CONCLUSION".center(50))
print("="*50+ "\n")

for i, point in enumerate(conclusions, start=1):
    wrapped_text = textwrap.fill(f"{i}. {point}", width=80)
    print(wrapped_text + "\n")


print("="*50)

"""---
**Project Completed By:**  
**Nitu Dave**  
*Google Data Analytics Certified | MSc Physics | Data Enthusiast*
"""